package sk.berni.timeTrackerApp.utilities;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import sk.berni.timeTrackerApp.database.Activity;

import java.io.File;
import java.io.FileOutputStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;

import static sk.berni.timeTrackerApp.utilities.StatsCalculation.*;

public class PdfGenerator {

    private final ArrayList<Activity> data;
    private String dateFrom, dateTo;
    private boolean chooseOption;

    public PdfGenerator(ArrayList<Activity> activitiesByName) {
        this.data = activitiesByName;
    }

    public void createPdf() {

        File file = new File(getFilePath());
        file.getParentFile().mkdirs();

        Document document = null;
        try {
            document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(getFilePath()));
            document.open();

            createTitle(document);
            createFromToTitleParagraph(document);

            float[] columnWidths = {1, 3, 3, 4};
            PdfPTable table = new PdfPTable(columnWidths);
            table.setWidthPercentage(100);
            setCellStyle(table, 2, 146, 181);
            setCellTitleText(table, "No.", "Date", "Activity name", "Time");

            addDataToTable(table);
            setCellStyle(table, 251, 181, 8);

            String totalTime = statsTotalTime(data);
            String totalDays = chooseOption ? statsTotalDaysFromFirstPutToLastPutDate(data) : statsTotalDays(data);
            String average = statsAverage();
            setCellTitleText(table, " ", "Total days - " + totalDays, "Average - " + average, "Total time - " + totalTime);

            document.add(table);

            // Sign
            Chunk signature = new Chunk("\n\n Generated by Time tracker app.");
            Paragraph base = new Paragraph(signature);
            document.add(base);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert document != null;
        document.close();

    }

    private void addDataToTable(PdfPTable table) {
        table.getDefaultCell().setBackgroundColor(new BaseColor(244, 244, 244));
        table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        Collections.sort(data);
        for (int i = 1; i <= data.size(); i++) {
            Activity actualActivity = data.get(i - 1);
            table.addCell("" + i);
            table.addCell(actualActivity.getDate());
            table.addCell(actualActivity.getNameOfActivity());
            table.addCell(actualActivity.getActivityTime());
        }
    }

    private void setCellTitleText(PdfPTable table, String cellName1, String cellName2, String cellName3, String cellName4) {
        table.addCell(setTextColorToWhite(cellName1));
        table.addCell(setTextColorToWhite(cellName2));
        table.addCell(setTextColorToWhite(cellName3));
        table.addCell(setTextColorToWhite(cellName4));
        table.setHeaderRows(1);
    }
    
    private void createTitle(Document document) throws DocumentException {
        Font blue = new Font(Font.FontFamily.HELVETICA, 42, Font.BOLD, new BaseColor(2, 146, 181));
        Paragraph paragraph = new Paragraph("Time Tracker stats results", blue);
        document.add(paragraph);
    }

    private void createFromToTitleParagraph(Document document) throws DocumentException {
        Font orange = new Font(Font.FontFamily.HELVETICA, 32, Font.BOLD, new BaseColor(255, 181, 8));
        Paragraph paragraph = new Paragraph(dateFrom + " - " + dateTo, orange);
        paragraph.setSpacingBefore(10);
        document.add(paragraph);
        document.add(new Paragraph("\n"));
    }

    public String getFilePath() {
        String nameOfActivity = data.get(0).getNameOfActivity();
        dateFrom = data.get(0).getDate().substring(0, 10);
        dateTo = chooseOption ? data.get(data.size() - 1).getDate().substring(0, 10) : 
        	new SimpleDateFormat("dd.MM.yyyy").format(Timestamp.from(Instant.now()));
        return "stats/" + nameOfActivity + "_" + dateFrom + "-" + dateTo + ".pdf";
    }

    private void setCellStyle(PdfPTable table, int r, int g, int b) {
        table.getDefaultCell().setBackgroundColor(new BaseColor(r, g, b));
        table.getDefaultCell().setBorderColor(new BaseColor(r, g, b));
        table.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
        table.getDefaultCell().setFixedHeight(20);
    }

    public Phrase setTextColorToWhite(String string) {
        Font white = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);
        return new Phrase(string, white);
    }

	public void setChooseOption(boolean chooseOption) {
		this.chooseOption = chooseOption;
	}

}
